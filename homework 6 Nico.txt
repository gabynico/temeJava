---------------------------------------------------------------------------------
	Generics
---------------------------------------------------------------------------------


	Questions


1.	Is it possible to define your own generic classes? But generic methods?
#################Response:
generic classes -Yes
generic methods -Yes

[ZP] - 10
2.      How do you declare the type parameter(s) for a generic class? But for a method?
#################Response:
public class Generics<T1,T2 >
public T1 getT1()

[ZP] 6 public <T> T get();
3.      Can you create a generic method in a generic class, where the generic method has a different type parameter
than the class?
If yes, provide an example.
#################Response:
Yes
See class GenericClassMethod

[ZP] 5 - where is the different type parameter, I see only one type parameter
See class GenericClassMethod-> public void genericMethod1(E ref) {
See class GenericClassMethod-> public void genericMethod2(ArrayList<Object> list) {


4.      Does Java create multiple types for each invocation of a parameterized type? How many of them?
#################Response:

When you replace the formal type parameter with the actual type it is called a parameterized type.
A reference type in Java, which accepts one or more type parameters, is called a generic type.
A generic type is mostly implemented in the compiler.
The JVM has no knowledge of a generic type.
All actual type parameters are erased during compile time using a process known as erasure.

Java compiler replaces generic type information from source and adds casts as needed and delivers the byte code,
generics related information are kept as meta-data in the bytecode for debugging, reflection purposes.
[ZP] - 7 so how many types are created?

5.      Can you call a method declared with a type List<Object> with a parameter of type List<String>?
If not, how can you make the call legal?
#################Response:
No. See class GenericsQ5.
'meth(java.util.List<java.lang.Object>)' in 'homework6.GenericsQ5' cannot be applied to '(java.util.List<java.lang.String>)'
class GenericsQ5 - meth_ok

[ZP] 10

6.      If you use wildcards, can you modify the parameter inside the method call? Why?
#################Response:
Yes.
A wildcard represents an arbitrary class, and is followed by a restriction.
Restrictia poate fi destul de permisiva.

[ZP] - 

7.      Explain the following method declaration syntax:
        public static <T extends Comparable<? super T>> void sort(List<T> list)
#################Response:
The symbol '?' is a wildcard.
A wildcard represents an arbitrary class, and is followed by a restriction.
In this case, the restriction is that the arbitrary class must be a superclass of T.
So, this says that T must extend a base class X which is-a Comparable<X>.
So, T is-a Comparable<X>.
So, T implements the required method and all is well.

[ZP] - 10

8.      When do you use a generic method and when a method with wildcards?
#################Response:
A wildcard represents an arbitrary class, and is followed by a restriction.
Generic - cand nu am nici o restrictie
[ZP] so when we use one and when the other
9.      Can you call generics code from "old" non-generics code? But non-generics code from generics code?
#################Response:
Yes.
See class NonGenericsVsGenerics

[ZP] 10

10.     Can you use statics in generic classes?
#################Response:
Yes
see Generics

[ZP] 0 - where is the static generic method
11.     Provide two examples where you can get an unchecked warning.
#################Response:

[ZP] -0 

	Problems


1.	Consider the following:

    interface Sink<T> { 
        flush(T t); 
    }

    Imagine using it as demonstrated by the code below.

    public static <T> T writeAll(Collection<T> coll, Sink<T> snk){ 
        T last;
        for (T t : coll) { 
            last = t;
            snk.flush(last);
        }
        return last;
    }
    ...
    Sink<Object> s;
    Collection<String> cs;
    String str = writeAll(cs, s);
    
    
    Is the code legal? If yes, why? If not, fix it.
#################Done -> see class ClassSink
public static <T> T writeAll(Collection<T> coll, Sink<? super T> snk){

[ZP] - 0 - don't see the demonstration
    
2.      Transform the following code to use generics:

    interface Collection { 
        public boolean containsAll(Collection c);
        public boolean addAll(Collection c);
    }
#################Done ->
public abstract interface Collection1<T> {
    public boolean containsAll(T c);
    public boolean addAll(T c);
}
[ZP] 0 - the given interface and the interface that you created is total different. See documentation for Collection interface in jdk1.4 and in jdk1.5
interface Collection1<T> {
    boolean  containsAll(Collection<? super T> c, T t);
    boolean addAll(Collection<? super T> c, T t);
}


3.      Write a generic function to sort any collections using bubble sort.
#################Done -> class BubbleSortArray

10
