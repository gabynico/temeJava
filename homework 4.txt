-----------------------------------------------------------------------------------------------------
	Detecting types
-----------------------------------------------------------------------------------------------------

	Questions

1.	What is the difference between upcasting and downcasting?
#################Response:
 Downcasting is the casting from a general to a more specific type, i.e. casting down the hierarchy.
 Java permits an object of a subclass type to be treated as an object of any superclass type.
 This is called upcasting. Upcasting is done automatically, while downcasting must be manually done by the programmer.

2.	What is the difference between �traditional� RTTI and reflection?
#################Response:
By Run Time Type Identification (RTTI) we denote a mechanism to find the type of an object at run time.
Typically, there are two situations when the RTTI mechanism is used:
- downcasting to a child class
- checking an object type via instanceof
For each class used in a program, Java stores its information in a Class object:
- At compile time, Java creates the Class objects and stores them in .class files.
- At run time, when an object of a class is created for the first time, the JVM loads the Class object into memory.
- When the Class object of a given type is loaded, it is used to create any object of that type.
Class objects can be accessed from Java.
RTTI limitation -> The Java RTTI mechanism allows you to discover an objects type at run time.
However: it requires full knowledge of the needed types at compile time.
Reflection
- The reflection mechanism allows to detect the available methods and fields of a class completely at run time.
- It is supported by the Class objects and the java.lang.reflect library.
- It works by loading the appropriate Class object from a .class file, which must be available at run time (not compile time),
either locally or through the network.

3.	Let there be the following code fragment: 
public class Circle {}
public class Shape extends Circle {}
public class Test {
  public static void main(String[] args) {	  
    Circle c = new Circle();
  }
}
Pretend you are an implementation of the Java Virtual Machine and try to evaluate (to a boolean value) the following expressions:
a.	c.isInstance(Circle)
b.	c instanceof Shape
c.	c.getClass() == Shape.class
d.	c.isInstance(Shape)
e.	c.getClass() == Circle.class
#################Response:
c.isInstance(Circle) -> true
c instanceof Shape -> false
c.getClass() == Shape.class -> false
c.isInstance(Shape)  -> false
c.getClass() == Circle.class -> true

4.	Is it possible to build a valid line of Java code in a string and then execute it at run-time (Like in the sample below)?
Write a short program to back-up your answer.
String line = "someClass.method()"; 
run(line);   
#################Response:
Yes
See class Test4
see class UnknownClass:
    privateReturnVal = (String) privateMethod.invoke(obj, null);

	Problems:

1.	Write a very simple graphical editor that allows you to draw objects deriving from the Shape class. Read the available classes of shapes
from a configuration file, and present to the user a simple menu that allows him to select the shape to be drawn.
public interface Shape {
  String draw();
  String getName();
}
Note: Write the simplest thing that meets the requirements.
The dimensions of the shapes will be hardcoded (for ex.: every Circle drawn will have the same radius)
#################Done ->



2.	Write a program that by means of reflection creates an instance of the following class: 
public class Unknown {
  private int hidden;
  public Unknown(int i) {
    this.hidden = i + 1;
  }
}
#################Done -> class UnknownClass



3.	Write a test program using reflection to print out the value of the hidden attribute after an instance of the Unknown class has been created
in the previous exercise. If you have succeeded, try to double the value of the hidden attribute of this instance.
Hint: check-out the java.lang.reflect package.
#################Done -> class UnknownClass


-----------------------------------------------------------------------------------------------------
	Passing and returning objects
-----------------------------------------------------------------------------------------------------

	Questions

1.	What is aliasing? Are there possible problems with aliasing? 
#################Response:
When you make an assignment to an object variable, you are assigning a reference to an object.
It is possible to have multiple variables that refer to the same object.
it's called aliasing.
Code that involves aliasing can get confusing fast, and it can be very difficult to debug.
In general, aliasing should be avoided or used with care.


2.	How do you send a message to an object?
#################Response:
Message Class


3.	What �pass by value� means? Explain how passing arguments works in Java.
#################Response:
Java passes everything by value, and not by reference.
When passing an argument (or even multiple arguments) to a method,
Java will create a copy or copies of the values inside the original variable(s)
and pass that to the method as arguments – and that is why it is called pass by value.
The key with pass by value is that the method will not receive the actual variable that is being passed –
but just a copy of the value being stored inside the variable.



4.	What is the difference between shallow copy and deep copy?
#################Response:
Java provide one interface called Cloneable, which is a marker interface and by implementing this interface
we can make duplicate copy of our object by calling clone() method of  java.lang.Object class.
By default any clone() method gives shallow copy of the object i.e. if we invoke super. clone() then it’s a shallow copy
but if we want to deep copy we have to override the clone() method and make it public and give own definition of making copy of object.

Shallow Copy
Whenever we use default implementation of clone method we get shallow copy of object means it create new instance and copy all the field of object
to that new instance
and return it as object type we need to explicitly cast it back to our original object.
This is shallow copy of the object. clone() method of the object class support shallow copy of the object.
If the object contains primitive as well as non primitive or reference type variable In  shallow copy,
the cloned object also refers to the same object to which the original object refers as only the object references gets copied
and not the referred objects themselves.

Deep Copy
Whenever we need own meaning of copy not to use default implementation we call it as deep copy,
whenever we need deep copy of the object we need to implement according to our need.
So for deep copy we need to ensure all the member class also implement the Cloneable interface and override the clone() method of the object class.

Difference between Shallow and Deep Copy
-  When we call Object.clone(), this method performs a shallow copy of object, by copying data field by field,
and if we override this method and by convention first call super.clone(), and then modify some fields to "deep" copy,
then we get deep copy of object. This modification is done to ensure that original and cloned object are independent to each other.
- In shallow copy main or parent object is copied, but they share same fields or children if fields are modified in one parent object
other parent fields have automatic same changes occur,but in deep copy this is not the case.
- If our parent object contains only primitive value then shallow copy is good for making clone of any object because in new object value is copied
but if parent object contains any other object then only reference value is copied in new parent object and both will point to same object
so in that case according to our need we can go for deep copy.
- Deep copy is expensive as compare to shallow copy in terms of object creation, because it involves recursive copying of data from other mutable objects,
which is part of original object.



5.	What is wrong in the following code? 

class MyObject implements Cloneable {
int i; 
MyObject(int ii) { i = ii; } 
public Object clone() { 
  Object o = super.clone(); 
  return o;
}
public String toString() { 
  return Integer.toString(i);
} 
}
#################Response:
see class MyObject


6.	How many methods has the Cloneable interface? What are the reasons of this interface existence? -
#################Response:
Nici o metoda.
The Cloneable interface defines no members. It is used to indicate that a class allows a bitwise copy of an object (that is, a clone)
to be made.
If you try to call clone( ) on a class that does not implement Cloneable, a CloneNotSupportedException is thrown.
 When a clone is made, the constructor for the object being cloned is not called. A clone is simply an exact copy of the original.


7.	Is C++ special keyword const available in Java? 
#################Response:
Yes.
"const" is a reserved word, but it has no function in Java. You cannot use it.
The most likely reason why it's there is because it was inherited from C++. In the first version of Java,
the language designers decided to reserve the word "const", with the idea of maybe implementing it in a later version of Java.
But to date, it hasn't been implemented.


8.	What is the difference between a read-only object and an immutable object? What is an immutable object?
Give an example of a read-only class.
#################Response:
A read-only object is an object that does not expose any way to change it.
The important distinction is that read-only objects are allowed to change.

An object is immutable if its state doesn’t change once the object has been created.
An immutable object is an object that cannot change at all, no matter what happens (Reflection doesn't count).

To create an immutable class following steps should be followed:
-Create a final class.
-Set the values of properties using constructor only.
-Make the properties of the class final and private
-Do not provide any setters for these properties.
-If the instance fields include references to mutable objects, don't allow those objects to be changed.

See class ReadOnlyClass.

9.	What will be the results of the following code?
public class StringUtil {
  public static String lowcase(String s) {
    return s.toLowerCase();
  }
  public static void main(String[] args) {
    String q = "world is not ENOUGH";
    String qq = lowcase(q);
    String qqq = q.substring(q.indexOf("ENOUGH"));
    qqq.concat(" is not enough");
    System.out.println(q);
    System.out.println(qq);
    System.out.println(qqq);
  }
}
#################Response:
world is not ENOUGH
world is not enough
ENOUGH


	Problems

1.	Implement the following classes and add deep cloneability to all classes via cloning.
Class Point
attributes: int x, int y
methods: setters, getters, draw, clone
Class Line 
attributes: Point point1, Point point2
 methods: setters, getters, draw, clone
Class Circle
attributes:  Point center, int radius
methods: setters, getters, draw, area, clone
Class Shape
attributes: Circle circle, Line line
 methods: draw, clone
#################Done -> classes ClassPoint, ClassLine, ClassCircle, ClassShape, ClassTest



2.	Implement arithmetical operations on complex numbers having the form a+i*b using the mutable-companion class technique.
Implement a method that adds the result of the expression (2+3*i)*(4+5*i)*(6+7*i) to the object owner of the method.
#################Done ->
class ComplexNumber, class MutableCompanionComplex

